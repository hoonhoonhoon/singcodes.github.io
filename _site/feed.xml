<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2016-11-24T14:56:20+09:00</updated><id>http://localhost:4000//</id><entry><title type="html">Swift pointers cheat sheet</title><link href="http://localhost:4000/2016/11/24/swift-pointer.html" rel="alternate" type="text/html" title="Swift pointers cheat sheet" /><published>2016-11-24T00:00:00+09:00</published><updated>2016-11-24T00:00:00+09:00</updated><id>http://localhost:4000/2016/11/24/swift-pointer</id><content type="html" xml:base="http://localhost:4000/2016/11/24/swift-pointer.html">&lt;h1 id=&quot;c와-swift의-포인터작업중&quot;&gt;c와 swift의 포인터(작업중…)&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;c&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;swift&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;const Type *&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafePointer&amp;lt;Type&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;const void *&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafeRawPointer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Type *&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;void *&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafeMutableRawPointer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;클래스&quot;&gt;클래스&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;c&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;swift&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Type * cosnt *&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafePointer&amp;lt;Type&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Type * __strong *&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Type **&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;AutoreleasingUnsafeMutablePointer&amp;lt;Type&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;함수&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;c&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;swift&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int (*) (void)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;@convention () -&amp;gt; Int32&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Null&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;c&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;swift&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;const Type * _Nonnull&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UsafePointer&amp;lt;Type&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;const Type * _Nullable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafePointer&amp;lt;Type&amp;gt;?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;const Type * _Null_unspecified&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UnsafePointer&amp;lt;Type&amp;gt;!&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;포인터의 계산&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;c&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;swift&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;int p[] = {3, 2, 1, 0};&lt;br /&gt;int a = *(p+1); =&amp;gt; 2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;let values = [3, 2, 1, 0]&lt;br /&gt;var arr: UnsafePointer&lt;Int&gt; = UnsafePointer&lt;Int&gt;(values)&lt;br /&gt;let a: Int = (arr + 1).pointee =&amp;gt; 2&lt;/Int&gt;&lt;/Int&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;타입 사이즈 계산&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;c의 &lt;em&gt;sizeof, strideof&lt;/em&gt; 함수의 역할&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct timeval { ... }
MemoryLayout&amp;lt;timeval&amp;gt;.size =&amp;gt; 16, timeval의 데이터 크기
MemoryLayout&amp;lt;timeval&amp;gt;.stride =&amp;gt; 16, timeval이 메모리에서 차지하는 실제 영역의 크기
MemoryLayout&amp;lt;timeval&amp;gt;.alignment =&amp;gt; 8, timeval의 메모리 주소 정렬, timeval은 8바이트의 배수로 메모리를 차지함
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><summary type="html">c와 swift의 포인터(작업중…)</summary></entry><entry><title type="html">Introducing chalk</title><link href="http://localhost:4000/2016/10/17/introducing-chalk.html" rel="alternate" type="text/html" title="Introducing chalk" /><published>2016-10-17T00:00:00+09:00</published><updated>2016-10-17T00:00:00+09:00</updated><id>http://localhost:4000/2016/10/17/introducing-chalk</id><content type="html" xml:base="http://localhost:4000/2016/10/17/introducing-chalk.html">&lt;p&gt;&lt;a href=&quot;https://github.com/nielsenramon/chalk&quot;&gt;Download Chalk here!&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;features&quot;&gt;Features:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Dark and Light theme.&lt;/li&gt;
  &lt;li&gt;Filter on tags.&lt;/li&gt;
  &lt;li&gt;Customizable pagination.&lt;/li&gt;
  &lt;li&gt;Beautified link sharing in Facebook and other social media.&lt;/li&gt;
  &lt;li&gt;Automatic time to read post indicator.&lt;/li&gt;
  &lt;li&gt;Automatic RSS feed.&lt;/li&gt;
  &lt;li&gt;About page.&lt;/li&gt;
  &lt;li&gt;404 page.&lt;/li&gt;
  &lt;li&gt;SEO optimized.&lt;/li&gt;
  &lt;li&gt;PageSpeed optimized.&lt;/li&gt;
  &lt;li&gt;Cross browser support (supports all modern browsers).&lt;/li&gt;
  &lt;li&gt;Media embed for videos.&lt;/li&gt;
  &lt;li&gt;Enlarge images on click (like Medium).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;integrations&quot;&gt;Integrations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://analytics.google.com/analytics/web/&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ionicons.com/&quot;&gt;Ionicons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Social media links&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;used-tools&quot;&gt;Used tools&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://circleci.com/&quot;&gt;Circle CI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gjtorikian/html-proofer&quot;&gt;Html-proofer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll-assets&quot;&gt;Jekyll assets&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll-sitemap&quot;&gt;Jekyll Sitemap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://html5boilerplate.com/&quot;&gt;HTML5 Boilerplate&lt;/a&gt; (Influenced by)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kickster.nielsenramon.com/&quot;&gt;Kickster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://imulus.github.io/retinajs/&quot;&gt;Retina.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stacss.nielsenramon.com/&quot;&gt;STACSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;If you haven&amp;#8217;t installed Ruby then go ahead and install it with: &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install Ruby&lt;/code&gt;.
Next setup your environment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bin/setup&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;

&lt;p&gt;Run Jekyll:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;deploy-to-github-pages&quot;&gt;Deploy to GitHub Pages&lt;/h2&gt;

&lt;p&gt;Run this in the root project folder in your console:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bin/deploy&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find more info on how to use the gh-pages branch and a custom domain &lt;a href=&quot;https://help.github.com/articles/quick-start-setting-up-a-custom-domain/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nielsenramon/kickster#automated-deployment-with-circle-ci&quot;&gt;View this&lt;/a&gt; for more info about automated deployment with Circle CI.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have any questions about using or configuring Chalk please create an issue &lt;a href=&quot;&quot; title=&quot;here&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;</content><category term="web" /><category term="jekyll" /><summary type="html"></summary></entry><entry><title type="html">How to configure Chalk</title><link href="http://localhost:4000/2016/10/16/configuring-chalk.html" rel="alternate" type="text/html" title="How to configure Chalk" /><published>2016-10-16T00:00:00+09:00</published><updated>2016-10-16T00:00:00+09:00</updated><id>http://localhost:4000/2016/10/16/configuring-chalk</id><content type="html" xml:base="http://localhost:4000/2016/10/16/configuring-chalk.html">&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file is the most important one. It contains the basic setup of your project.
Some parts are preconfigured and shouldn’t be touched as the comments state.
Of course if you are familiar with Jekyll you can change whatever you want.&lt;/p&gt;

&lt;p&gt;Note: You do not &lt;em&gt;have&lt;/em&gt; to change anything. Chalk works out of the box. I do recommend changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; to suit your needs.&lt;/p&gt;

&lt;h3 id=&quot;mandatory-settings&quot;&gt;Mandatory settings&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Mandatory settings&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Chalk&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;paginate_path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/posts/page/:num/&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://chalk.nielsenramon.com&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# add site url http://example.com/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;blog_theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Or use dark&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;: Set baseurl to match the production URL without the host.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;: Used as the page title and throughout your project as the default name.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;paginate&lt;/code&gt;: Define how much posts should be shown on the homepage for each page.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;paginate_path&lt;/code&gt;: Change the path name to something else for paginated pages.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;: Your production url (http://example.com).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blog_theme&lt;/code&gt;: 2 options here, &lt;code class=&quot;highlighter-rouge&quot;&gt;light&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;dark&lt;/code&gt;. Choose which design you prefer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;optional-settings&quot;&gt;Optional settings&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Optional settings&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;discus_identifier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add your Disqus identifier&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ga_analytics&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add your GA Tracking Id&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rss_enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Change to false if not&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;social&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;dribbble&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add your Dribbble link&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;facebook&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add your Facebook link&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add your GitHub link&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;linkedin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add your LinkedIn link&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add your Twitter handle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;discus_identifier&lt;/code&gt;: If you like to use Disqus for comments on each blog post, you can add the Disqus identifier here and it will popup automatically.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ga_analytics&lt;/code&gt;: Add Google Analytics Tracking ID here.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rss_enabled&lt;/code&gt;: When set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, the rss icon in the top navigation will show up and people will be able to subscribe to your rss feed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;social&lt;/code&gt;: Add you social links in here. When filled in they will show up in the navigation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-settings&quot;&gt;Other settings&lt;/h3&gt;

&lt;p&gt;Other than the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; you can change a lot more in the project.&lt;/p&gt;

&lt;h4 id=&quot;tags&quot;&gt;Tags&lt;/h4&gt;

&lt;p&gt;To add tags you must add a file with the tag name in &lt;code class=&quot;highlighter-rouge&quot;&gt;_my_tags&lt;/code&gt;.
In the file you add 2 variables: &lt;code class=&quot;highlighter-rouge&quot;&gt;slug&lt;/code&gt; used to reference the tag and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; which is displayed in the article header.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# _my_tags/design.md&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;design&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Design&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;scss&quot;&gt;SCSS&lt;/h4&gt;

&lt;p&gt;You can change colors, fonts, sizes in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_assets/stylesheets/_variables.scss&lt;/code&gt; file.
For each specific theme (light or dark) you can change the variables in &lt;code class=&quot;highlighter-rouge&quot;&gt;_assets/stylesheets/dark.scss&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_assets/stylesheets/light.scss&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// =============================================================================
// Variables
// =============================================================================
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Typography
// =============================================================================
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Lato&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cormorant Garamond&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Courier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$base-font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$base-font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$base-font-weight-bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Colors
// =============================================================================
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Brand colors
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$brand-success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#1fbf92&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$brand-danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#e74b3c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$brand-primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#3449ed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$brand-warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#f1c90b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Sizes
// =============================================================================
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Grid
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;650px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$gutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$one-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$negative-gutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$gutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Font sizes
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$base-font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$base-line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Box sizes
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$base-border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Effects
// =============================================================================
&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$base-transition-speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;.2s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;fonts&quot;&gt;Fonts&lt;/h4&gt;

&lt;p&gt;Chalk uses Google Fonts by default. You can change the font in &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/javascripts.html&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/webfont/1.6.16/webfont.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;WebFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;families&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Cormorant Garamond:700'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lato:300,400,700'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;footer&quot;&gt;Footer&lt;/h4&gt;

&lt;p&gt;Changing the text in the footer is easy. It can be found in &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/footer.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have any questions about using or configuring Chalk please create an issue &lt;a href=&quot;&quot; title=&quot;here&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;</content><category term="web" /><category term="jekyll" /><summary type="html">The _config.yml file is the most important one. It contains the basic setup of your project.
Some parts are preconfigured and shouldn’t be touched as the comments state.
Of course if you are familiar with Jekyll you can change whatever you want.</summary></entry><entry><title type="html">Swift pointers 요약</title><link href="http://localhost:4000/2016/10/15/xcode-essentials.html" rel="alternate" type="text/html" title="Swift pointers 요약" /><published>2016-10-15T00:00:00+09:00</published><updated>2016-10-15T00:00:00+09:00</updated><id>http://localhost:4000/2016/10/15/xcode-essentials</id><content type="html" xml:base="http://localhost:4000/2016/10/15/xcode-essentials.html">&lt;h1 id=&quot;c와-swift의-포인터-변환&quot;&gt;c와 swift의 포인터 변환&lt;/h1&gt;</content><summary type="html">c와 swift의 포인터 변환</summary></entry><entry><title type="html">osx console에서 디렉토리별로 용량을 알아야할 경우</title><link href="http://localhost:4000/swift/2016/08/04/osx-console-ec-97-90-ec-84-9c-eb-94-94-eb-a0-89-ed-86-a0-eb-a6-ac-eb-b3-84-eb-a1-9c-ec-9a-a9-eb-9f-89-ec-9d-84-ec-95-8c-ec-95-84-ec-95-bc-ed-95-a0-ea-b2-bd-ec-9a-b0.html" rel="alternate" type="text/html" title="osx console에서 디렉토리별로 용량을 알아야할 경우" /><published>2016-08-04T15:36:13+09:00</published><updated>2016-08-04T15:36:13+09:00</updated><id>http://localhost:4000/swift/2016/08/04/osx-console%EC%97%90%EC%84%9C-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EB%B3%84%EB%A1%9C-%EC%9A%A9%EB%9F%89%EC%9D%84-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EA%B2%BD%EC%9A%B0</id><content type="html" xml:base="http://localhost:4000/swift/2016/08/04/osx-console-ec-97-90-ec-84-9c-eb-94-94-eb-a0-89-ed-86-a0-eb-a6-ac-eb-b3-84-eb-a1-9c-ec-9a-a9-eb-9f-89-ec-9d-84-ec-95-8c-ec-95-84-ec-95-bc-ed-95-a0-ea-b2-bd-ec-9a-b0.html">&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;du -h  &lt;/td&gt;
      &lt;td&gt;grep -e [0-9.]M[:print:]*&lt;/td&gt;
      &lt;td&gt;sort -r&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;du -&amp;gt; 용량을 디렉토리 별로 재귀적으로 표시&lt;/p&gt;

&lt;p&gt;grep -&amp;gt; M단위가 넘어가는 폴더만 표시&lt;/p&gt;

&lt;p&gt;sort -&amp;gt; 용량으로 정렬&lt;/p&gt;</content><author><name>singcodes</name></author><summary type="html">du -h  
      grep -e [0-9.]M[:print:]*
      sort -r</summary></entry><entry><title type="html">defer</title><link href="http://localhost:4000/codes/swift/2016/07/29/defer.html" rel="alternate" type="text/html" title="defer" /><published>2016-07-29T16:02:04+09:00</published><updated>2016-07-29T16:02:04+09:00</updated><id>http://localhost:4000/codes/swift/2016/07/29/defer</id><content type="html" xml:base="http://localhost:4000/codes/swift/2016/07/29/defer.html">&lt;p&gt;&lt;strong&gt;이 글은 오류가 있습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;guard문이 아니라 return 문 밑의 defer는 실행이 안되는 것이 맞습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  guard 문 밑에 defer가 있는 경우는 guard문의 결과에 따라 실행하지 않을 수도 있습니다.
  
  guard 문의 위에 위치한 경우는 무조건 실행됩니다.
&lt;/blockquote&gt;</content><author><name>singcodes</name></author><summary type="html">이 글은 오류가 있습니다.</summary></entry><entry><title type="html">Switch case 문을 위한 Custom operator 만들어보기</title><link href="http://localhost:4000/swift/2016/07/29/ec-8a-a4-ec-9c-84-ec-b9-98-ec-bc-80-ec-9d-b4-ec-8a-a4-eb-ac-b8-ec-9d-84-ec-9c-84-ed-95-9c-custom-operator-eb-a7-8c-eb-93-a4-ec-96-b4-eb-b3-b4-ea-b8-b0.html" rel="alternate" type="text/html" title="Switch case 문을 위한 Custom operator 만들어보기" /><published>2016-07-29T15:18:20+09:00</published><updated>2016-07-29T15:18:20+09:00</updated><id>http://localhost:4000/swift/2016/07/29/%EC%8A%A4%EC%9C%84%EC%B9%98-%EC%BC%80%EC%9D%B4%EC%8A%A4-%EB%AC%B8%EC%9D%84-%EC%9C%84%ED%95%9C-custom-operator-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/swift/2016/07/29/ec-8a-a4-ec-9c-84-ec-b9-98-ec-bc-80-ec-9d-b4-ec-8a-a4-eb-ac-b8-ec-9d-84-ec-9c-84-ed-95-9c-custom-operator-eb-a7-8c-eb-93-a4-ec-96-b4-eb-b3-b4-ea-b8-b0.html">&lt;p&gt;오늘도 뜬금없는 강의(강의라는 단어가 저한테 좀 과한 느낌이드네요)입니다. 이번에는 custom operator에 특히 switch case문에서 사용하는 custom expression pattern에 대해 써보겠습니다.&lt;/p&gt;

&lt;p&gt;개발을 하다보면 쉽게 마주치는 if 문이 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-swift&quot;&amp;gt;let number = 100

if 100 &amp;gt; number {
    print(&quot;smaller than 100&quot;)
} else if 100 &amp;lt;= number {
    print(&quot;equal or bigger than 100&quot;)
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;switch case의 풍부한 문법에 눈뜨기 시작하신 스위프트 유저라면 switch case문을 사랑하기 시작했을 겁니다.&lt;/p&gt;

&lt;p&gt;저도 마찬가지라 저 코드를 어떻게 하면 switch case로 옮길 수 있을까 고민을 했습니다.&lt;/p&gt;

&lt;p&gt;시작과 끝의 범위가 명확하다면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-swift&quot;&amp;gt;case 0...100:
    print(&quot;blah blah&quot;)&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;라는 형식도 가능합니다만, 두 번째 else if 문을 switch case 문으로 하려면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-swift&quot;&amp;gt;case 100..&amp;lt;Int.max:
    print(&quot;blah blah&quot;)&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;처럼 끝을 지정해야합니다. 아니 난 그냥 100보다 큰 숫자만 체크하면 되는건데, 뭔 맥시멈 밸류까지 끌어와야 하나, 라는 생각에 커스텀 패턴을 만들어보자는 생각을 했습니다.&lt;/p&gt;

&lt;p&gt;코드는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-swift&quot;&amp;gt;//괜히 만들어봤습니다. 좀더 프로토콜 중심으로 구성하고 싶었는데, 제 제너릭에 대한 습득이 아직 부족하여서.. associatedtype으로는 문제가 많아 struct를 중심으로 작성합니다.
protocol PatternComparable {}

// 비교 operator와 비교값을 담을 수 있도록 struct를 작성합니다.
// op - compare operator
// to - target comparable value
// Comparable을 제너릭으로 사용하여 Comparable을 상속하는 모든 타입에서 이 코드를 사용가능 하도록 했습니다.
struct Pattern&amp;lt;C: Comparable&amp;gt;: PatternComparable {
    let op: (lhs: C, rhs: C) -&amp;gt; Bool
    let to: C
    func compare(from: C) -&amp;gt; Bool {
        return op(lhs: from, rhs: to)
    }
}

// Pattern struct를 편하게 생성할 수 있도록 만든 함수입니다.
func patternize&amp;lt;C: Comparable&amp;gt;(op: (lhs: C, rhs: C) -&amp;gt; Bool, _ to: C) -&amp;gt; Pattern&amp;lt;C&amp;gt; {
    return Pattern&amp;lt;C&amp;gt;(op: op, to: to)
}

// ~=는 pattern matching operator입니다.
// pattern - case 문에 들어가는 predicate입니다.
// value - switch 문에 들어가는 비교값입니다.
func ~=&amp;lt;C: Comparable&amp;gt;(pattern: Pattern&amp;lt;C&amp;gt;, value: C) -&amp;gt; Bool {
    return pattern.compare(value)
}

// 직접 tuple값으로 (예: (op: &amp;lt;, to: 100)) 패턴을 생성해보려 했으나 실패했습니다. tuple패턴은 switch에도 역시 tuple이 와야하더군요. swift3에서 튜플 타입에 변화가 생기면 사용가능할까 하여 놔뒀습니다.
func ~=&amp;lt;C: Comparable&amp;gt;(pattern: (op:(lhs: C, rhs: C)-&amp;gt;Bool, to:C), value: C) -&amp;gt; Bool {
    return pattern.0(lhs:value, rhs: pattern.1)
}

// Comparable에서 직접 Pattern struct를 생성하도록 만든 프로토콜입니다. 다만 문법상으로 순서가 애매합니다. 비교연산자의 우측에 가야할 값을 좌측으로 보내야해서 좀 헷갈린다고나 할까요. 그냥 이런것도 가능하구나 하고 생각해주시면 될 거 같습니다. 더 좋은 방식이 있다면 함께 의논해보면 좋겠습니다.
// 예) 100보다 큰 숫자를 체크할 경우
// case 100.patterned(&amp;gt;) - 이상하죠?
protocol Patternable {}
extension Int: Patternable {}
extension Int8: Patternable {}
extension Int16: Patternable {}
extension Int32: Patternable {}
extension Int64: Patternable {}
extension UInt: Patternable {}
extension UInt8: Patternable {}
extension UInt16: Patternable {}
extension UInt32: Patternable {}
extension UInt64: Patternable {}
extension Double: Patternable {}
extension Float: Patternable {}
extension CGFloat: Patternable {}

extension Patternable where Self: Comparable {
    func patterned&amp;lt;E where E: Comparable&amp;gt;(op: (lhs: E, rhs: E) -&amp;gt; Bool) -&amp;gt; Pattern&amp;lt;E&amp;gt; {
        return Pattern&amp;lt;E&amp;gt;(op: op, to: self as! E)
    }
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;코드는 아래와 같은 방식으로 테스트해 볼 수 있습니다:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-swift&quot;&amp;gt;let value = &quot;test&quot;

switch value {
case patternize(&amp;lt;=, &quot;test1&quot;):
    print(&quot;smaller than test1&quot;)
case patternize(&amp;gt;, &quot;tes&quot;):
    print(&quot;bigger than tes&quot;)
default:
    print(&quot;default&quot;)
}

let value1 = 100.1

switch value1 {
case 100.0.patterned(&amp;lt;=):
    print(&quot;smaller than 100.0&quot;)
case patternize(&amp;gt;, 100.0):
    print(&quot;bigger than 100.0&quot;)
default:
    print(&quot;default&quot;)
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;결과:&lt;/p&gt;

&lt;blockquote&gt;smaller than test1
bigger than 100.0&lt;/blockquote&gt;

&lt;h4 id=&quot;comparable을-제너릭의-상속값으로-사용했기-때문에-문자열같이-comparable을-extension으로-가지는-모든-타입에서-사용이-가능하다는-장점이-있습니다-그래도-if-문보다-손이-많이-가는건-어쩔-수가-없네요-더-좋은-방법을-함께-토론할-수-있다면-좋겠습니다&quot;&gt;Comparable을 제너릭의 상속값으로 사용했기 때문에, 문자열같이 Comparable을 extension으로 가지는 모든 타입에서 사용이 가능하다는 장점이 있습니다. 그래도 if 문보다 손이 많이 가는건 어쩔 수가 없네요. 더 좋은 방법을 함께 토론할 수 있다면 좋겠습니다.&lt;/h4&gt;

&lt;p&gt;좋은 하루 되세요.&lt;/p&gt;</content><author><name>singcodes</name></author><summary type="html">오늘도 뜬금없는 강의(강의라는 단어가 저한테 좀 과한 느낌이드네요)입니다. 이번에는 custom operator에 특히 switch case문에서 사용하는 custom expression pattern에 대해 써보겠습니다.</summary></entry><entry><title type="html">C library with Framework(ObjcC + Swift)</title><link href="http://localhost:4000/swift/2016/07/22/c-library-with-frameworkobjcc-swift.html" rel="alternate" type="text/html" title="C library with Framework(ObjcC + Swift)" /><published>2016-07-22T18:07:10+09:00</published><updated>2016-07-22T18:07:10+09:00</updated><id>http://localhost:4000/swift/2016/07/22/c-library-with-frameworkobjcc-swift</id><content type="html" xml:base="http://localhost:4000/swift/2016/07/22/c-library-with-frameworkobjcc-swift.html">&lt;p&gt;몇 일을 삽질 했네요.&lt;/p&gt;

&lt;p&gt;C library를 Objective C + Swift로 구성한 Framework에서 사용하는 경우 module 맵을 구성하는 건 맞지만, ffmpeg의 경우 umbrella header를 쓰게 되면, 문법 오류가 생기는지, 문제가 발생합니다. 그냥 가지가지 에러가 발생해요.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;blockquote&gt;그래서 아래와 같이&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-objectivec&quot;&amp;gt;module FFmpegLIB [extern_c] {
    header &quot;blah.h&quot;
    header &quot;walah.h&quot;
    
    export *
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;이런식으로 필요한 헤더만 모듈 맵에 구성하면 됩니다.&lt;/blockquote&gt;</content><author><name>singcodes</name></author><summary type="html">몇 일을 삽질 했네요.</summary></entry><entry><title type="html">메모리, 스레드 그리고 배열(Array) 2</title><link href="http://localhost:4000/swift/2016/07/19/eb-a9-94-eb-aa-a8-eb-a6-ac-ec-8a-a4-eb-a0-88-eb-93-9c-ea-b7-b8-eb-a6-ac-ea-b3-a0-eb-b0-b0-ec-97-b4array-2.html" rel="alternate" type="text/html" title="메모리, 스레드 그리고 배열(Array) 2" /><published>2016-07-19T16:29:56+09:00</published><updated>2016-07-19T16:29:56+09:00</updated><id>http://localhost:4000/swift/2016/07/19/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%97%B4array-2</id><content type="html" xml:base="http://localhost:4000/swift/2016/07/19/eb-a9-94-eb-aa-a8-eb-a6-ac-ec-8a-a4-eb-a0-88-eb-93-9c-ea-b7-b8-eb-a6-ac-ea-b3-a0-eb-b0-b0-ec-97-b4array-2.html">&lt;h4 id=&quot;array는-왜-thread에-안전하지-않을까&quot;&gt;Array는 왜 Thread에 안전하지 않을까.&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;한 여자, 혹은 한 남자가 있습니다. 이 사람은 두 명 이상의 사랑을 동시에 받았죠. 어쩌겠습니다. 보기만 해도 반하는 사람인걸요. 이 사람은 시간을 정해서 따로 따로 연인을 만나려고 했습니다만, 사랑이라는거 알잖아요? 이 사람을 사랑하는 사람들이 하필 오늘 깜짝 놀래켜 주려고 이 사람의 직장앞에서 선물을 들고 기다리다 퇴근시간에&lt;/em&gt; &lt;strong&gt;&lt;em&gt;짠&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;동시에 나타납니다. 뺨도 맞고 사랑도 잃고, 선물도 사라지고&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;아침 코딩 잔혹극 ‘배열의 사랑’ 중&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어제 배열에 대해 잠깐 글을 올렸는데, 이 threadsafe에 대해서 궁금한 분들이 (계시죠?) 계실것 같아, 추가로 조금 설명을 하려고 합니다.&lt;/p&gt;

&lt;p&gt;뭐, 제가 할 수 있는 가장 간략하고, 쉬운 비유는 위에 이미 썼습니다. 다만 실제와는 좀 거리가 있는 비유라 다시 해볼께요.&lt;/p&gt;

&lt;p&gt;여기 인기 많은 배열이 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code&amp;gt;var nightwish = [&quot;Tuomas&quot;, &quot;Erno&quot;, &quot;Jukka&quot;, &quot;Marco&quot;, &quot;Troy&quot;]&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;심포닉 메탈 배열~~ 예이~~&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;보컬이 빠졌네요. 동시에 2개의 스레드에서 append함수를 통해 보컬을 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thread 1(new fans 1)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code&amp;gt;nightwith.append(&quot;Anette&quot;)&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;아네트가 들어왔습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thread 2(new fans 2)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code&amp;gt;nightwish.append(&quot;Floor&quot;)&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;새로 플로어도 들어왔어요.&lt;/p&gt;

&lt;p&gt;Thread 1과 Thread 2가 거의 동시에 append를 호출했습니다. 결과는 어떻게 될까요? 결과를 말하기 전에 먼저 아래 내용을 한번 보시면 좋겠습니다.&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h5 id=&quot;array는-내부에-arraybuffer라는-스토리지를-가지고-있습니다-append를-호출하게-되면-다음과-같은-일이-벌어지리라-추측하고-있습니다&quot;&gt;Array는 내부에 ArrayBuffer라는 스토리지를 가지고 있습니다. append를 호출하게 되면 다음과 같은 일이 벌어지리라 추측하고 있습니다.&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayBuffer 복사&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayBuffer에 공간이 충분하면 기존 element를 추가&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayBuffer에 공간이 충분하지 않는 경우&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;더 큰 ArrayBuffer생성&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;기존 버퍼의 내용 복제&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;element 추가&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;ArrayBuffer는 새로 생성되면 8바이트정도의 여유를 가지고 있는 거 같습니다. element를 더할 때마다 배열의 메모리 주소를 추적해보면, 8바이트의 데이터가 쌓일때마다 주소가 변합니다. 그 반대로 데이터를 배열에서 제거하는 경우는 메모리 주소가 변하지 않습니다. 한 번 늘어난 배열의 메모리 크기는 변하지 않는다는 뜻이겠지요.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h5 id=&quot;다시-팬들에게로-돌아가-보겠습니다&quot;&gt;다시 팬들에게로 돌아가 보겠습니다.&lt;/h5&gt;

&lt;p&gt;사실 스레드에 안전하지 않은 이유는 좀 어이없을 정도로 쉽습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Thread 1&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;append “Anette”&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;[“Tuomas”, “Erno”, “Jukka”, “Marco”, “Troy”]의 데이터를 내부에서 새로 만들어서 “Anette”를 추가합니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Thread 2&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;append “Floor”&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;동시에 접근 했기 때문에, Anette가 뭔지 모릅니다. [“Tuomas”, “Erno”, “Jukka”, “Marco”, “Troy”]의 데이터를 내부에서 새로 만들어서 “Floor”를 추가합니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Update Array Buffer&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;다행스럽게 ArrayBuffer를 새로 만들 때 Thread간 속도 차이가 있는 경우, 크래쉬는 나지 않습니다. Thread 1이 더 빠르다고 가장하면&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;[“Tuomas”, “Erno”, “Jukka”, “Marco”, “Troy”, “Anette”]의 데이터가 ArrayBuffer에 쓰여지고난 후,&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;[“Tuomas”, “Erno”, “Jukka”, “Marco”, “Troy”, “Floor”]의 데이터가 다시 동일한 ArrayBuffer에 쓰여집니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Anette는 들어가보지도 못하고 퇴출됩니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;바로 위에서도 말했지만, ArrayBuffer의 update마저 동시에 일어날 경우는 바로 아웃입니다. 크래쉬에요.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;위의 경우처럼 스레드에서 문제가 되는 과정은 바로 write or update의 과정입니다. 물론 읽는 과정에서 데이터가 사라지는 것 자체도 문제지만요.&lt;/em&gt;&lt;/p&gt;</content><author><name>singcodes</name></author><summary type="html">Array는 왜 Thread에 안전하지 않을까.</summary></entry><entry><title type="html">메모리, 스레드 그리고 배열(Array)</title><link href="http://localhost:4000/swift/2016/07/18/eb-a9-94-eb-aa-a8-eb-a6-ac-ec-8a-a4-eb-a0-88-eb-93-9c-ea-b7-b8-eb-a6-ac-ea-b3-a0-eb-b0-b0-ec-97-b4array.html" rel="alternate" type="text/html" title="메모리, 스레드 그리고 배열(Array)" /><published>2016-07-18T18:25:57+09:00</published><updated>2016-07-18T18:25:57+09:00</updated><id>http://localhost:4000/swift/2016/07/18/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%8A%A4%EB%A0%88%EB%93%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%97%B4array</id><content type="html" xml:base="http://localhost:4000/swift/2016/07/18/eb-a9-94-eb-aa-a8-eb-a6-ac-ec-8a-a4-eb-a0-88-eb-93-9c-ea-b7-b8-eb-a6-ac-ea-b3-a0-eb-b0-b0-ec-97-b4array.html">&lt;h2 id=&quot;memory&quot;&gt;Memory&lt;/h2&gt;

&lt;p&gt;스위프트와 Objective C의 배열은 상호 변환이 매우 쉽지만, 사실 둘은 전혀 다른 타입입니다.&lt;/p&gt;

&lt;p&gt;Swift의 Array는 value타입이며, Objective C에서 배열(NSArray, NSMutableArray)은 객체타입입니다. 이 말은 메모리 관리에 있어서 매우 큰 차이가 있다는 이야기입니다.&lt;/p&gt;

&lt;p&gt;Objective C의 NSArray를 swift에서 작성해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-objectivec&quot;&amp;gt;let original = NSMutableArray(objects: &quot;1&quot;)
let new = original&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 경우 자세하게 볼 필요도 없이, original과 new변수는 동일한 객체의 포인터를 담고 있습니다. new를 변경하면, original의 값에도 동일하게 변화가 생기겠죠.&lt;/p&gt;

&lt;p&gt;Swift의 경우를 볼까요? 테스트를 위해 메모리 번지를 가져오는 함수를 하나 추가했습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-objectivec&quot;&amp;gt;func address(o: UnsafePointer&amp;lt;Void&amp;gt;) -&amp;gt; Int {
    return unsafeBitCast(o, Int.self)
}

var original = [&quot;1&quot;]
var new = original
print(address(original)) // original변수의 메모리 번지
print(address(new)) // new변수의 메모리 번지&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;둘의 결과는 다릅니다. Array는 value type이기 때문에, 새로은 변수에 대입하는 즉시 새로운 메모리 공간을 만들고 내용을 복사하게 됩니다.&lt;/p&gt;

&lt;p&gt;정말 그런지 테스트를 해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-objectivec&quot;&amp;gt;func address(o: UnsafePointer&amp;lt;Void&amp;gt;) -&amp;gt; Int {
    return unsafeBitCast(o, Int.self)
}

var original = [&quot;1&quot;]
var new = original
new += [&quot;2&quot;]
print(&quot;original =&amp;gt; \(original):\(address(original)&quot;) // original변수의 메모리 번지
print(&quot;&quot;) // new변수의 메모리 번지&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;original =&amp;gt; [&quot;1&quot;]:7ffb2c001ad0
new =&amp;gt; [&quot;1&quot;, &quot;2&quot;]:7ffb295130b0&lt;/blockquote&gt;

&lt;p&gt;orignal의 값은 변함이 없고, 메모리 번지도 다릅니다.&lt;/p&gt;

&lt;p&gt;당연하지만,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-objectivec&quot;&amp;gt;print(&quot;new =&amp;gt; \(new):\(address(new))&quot;)
//new =&amp;gt; [&quot;1&quot;, &quot;2&quot;]:7fb3bbe0d5e0&amp;lt;br/&amp;gt;
new += [&quot;3&quot;]
print(&quot;new =&amp;gt; \(new):\(address(new))&quot;)
new.append(&quot;100&quot;)
//new =&amp;gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]:7fb3bd001350&amp;lt;br/&amp;gt;
print(&quot;new =&amp;gt; \(new):\(address(new))&quot;)
//new =&amp;gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;100&quot;]:7fb3bd001350&amp;lt;br/&amp;gt;
new.append(&quot;1001&quot;)
print(&quot;new =&amp;gt; \(new):\(address(new))&quot;)
//new =&amp;gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;100&quot;, &quot;1001&quot;]:7fb3bd201b50&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;의 결과처럼, += operator로 배열에 값은 추가한 경우 new의 값은 새로 복사되어 메모리에도 변경이 생기지만, append등 배열의 값을 변경하는 메소드는 값의 복사가 이루어지지 않아 동일한 메모리 번지를 유지합니다. &lt;strong&gt;&lt;em&gt;(오류가 있었습니다. 8바이트 이상의 값이 추가되면 메모리 번지도 변경됩니다.)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;thread&quot;&gt;Thread&lt;/h2&gt;

&lt;p&gt;단도직입적으로 말씀드리자면, Array 스레드에 안전하지 않습니다. 간단한 코드를 작성하면 쉽게 알 수가 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;code class=&quot;language-objectivec&quot;&amp;gt;var new = [&quot;1001&quot;]
let queue = dispatch_queue_create(&quot;apply&quot;, DISPATCH_QUEUE_CONCURRENT)
for index in 0..&amp;lt;10 {
    dispatch_async(queue, { 
        new += [&quot;\(index)&quot;]
        //or
        new.append(&quot;\(index)&quot;)
    })
}

dispatch_barrier_async(queue) {
    print(&quot;&quot;)
    print(new)
    print(new.count)
}&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 로직을 몇번 반복해서 실행하면, 실행시마다 결과가 다릅니다! 이런! 결과만 다르면 다행이게요~?, 데이터가 길어질 수록 크래쉬를 만날 확률도 높아집니다. 많은 해결책들이 나와있으니 제가 같은 해결책으로 인터넷의 바다를 또 어지럽히지는 않겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;배열dictionary도-포함입니다같은-컨테이너-타입은-멀티스레드로-접근이-필요할-경우-이처럼-오류를-발생할-확률이-많기-때문에-threadsafe한-코드가-되도록-많은-주의를-기울이셔야-합니다&quot;&gt;배열(dictionary도 포함입니다)같은 컨테이너 타입은 멀티스레드로 접근이 필요할 경우 이처럼 오류를 발생할 확률이 많기 때문에, threadsafe한 코드가 되도록 많은 주의를 기울이셔야 합니다.&lt;/h4&gt;</content><author><name>singcodes</name></author><summary type="html">Memory</summary></entry></feed>
